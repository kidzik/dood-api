#summary Datatypes of objects used by dood server.

= Data types =

Content:

   * [Datatypes#Introduction Introduction]
   * [Datatypes#Interpretacja_list Interpretacja list]
   * [Datatypes#Header Header]
   * [DatatypesBusiness Business]
   * [DatatypesAdvertProximity Advert Proximity]


== Introduction == 

Przykładowy obiekt:

|| Nazwa Pola Wymaganego || Typ pola || Opis ||
|| _Nazwa Pola NIE Wymaganego_ || Typ pola || Opis ||

_UWAGA:_  wymóg obecności pola dotyczy ostatecznej informacji klienta o danym obiekcie. Serwer może przesyłać niepełne dane o obiektach jednak musi mieć wtedy pewność (za pomocą mechanizmu wersjonowania – pole `version`) że klient posiada świeże dane we wszystkich innych polach wymaganych.

Brak któregokolwiek pola wymaganego powinien skutkować odrzuceniem obiektu przez klienta API i ewentualnie wysłaniem raportu o błędzie.
Każdy obiekt mapowany z bazy danych ma określony numer typu i nazwę która przekazywana jest w polu o nazwie type i typie String znajdującym się wewnątrz przesyłanego obiektu. Pole to jest wymagane.

Pole typu `List<Long>` interpretowane jest w przypadku JSONa jako String z wartościami oddzielonymi przecinkami (CSV)
Obiekt *FRONTOWY* jest wyróżniony spośród innych obiektów znajdujących się na liście. Wyróżnienie odbywa się przez umieszczenie go na pierwszym miejscu w przesyłanej liście. Np. _Business_ ma frontową recenzję tj. znajdującą się na pierwszym miejscu na liście. Galeria może mieć frontowy obrazek.


==Interpretacja List== 

Przy modelowaniu obiektów często korzysta się z koncepcji listy. `Business` może mieć listę recenzji, użytkownik może mieć listę znajomych itd. Wprowadzenie jednego ogólnego typu List było dyskutowane przez twórców tego dokumentu i ostatecznie podjęto decyzje o niewprowadzaniu tego typu jako oddzielnej części API. Stworzyłoby to sztuczny obiekt który pomimo klarownego wydzielenia jego funkcjonalności niebyły czytelny przy analizowaniu konkretnych zapytań w określonym czasie działania aplikacji.  Wszystkie funkcje listy z powodzeniem mogą przejąć obiekty, które miały mieć podczepione pod siebie listy. Decyzje o wprowadzeniu osobnych obiektów typu List na poziomie aplikacji klienckich pozostawiamy w gestii twórców tych aplikacji.

Pewnym wyjątkiem od tej reguły jest obiekt Gallery (przechowuje on w końcu listę zdjęć). Obiekt ten jednak niesie w sobie również inne informacje specyficzne dla konkretnego zestawu zdjęć, stąd decyzja o jego wydzieleniu.

*BARDZO WAŻNĄ KWESTIĄ* jest rozdzielenie licznika obiektów znajdujących się w liście (nazwa zmiennej zaczyna się od total np. total_reviews) od samej listy (nazwa pola to drugi człon nazwy licznika w tym wypadku reviews w liczbie mnogiej). Licznik obiektów na liście musi zawsze wskazywać poprawną i aktualną wartość. Zmienna przechowująca samą listę idków już nie. W sytuacji gdyby jeden Business miał kilka tysięcy recenzji prowadziłoby to do przesyłania dużej ilości niepotrzebnych danych (użytkownicy rzadko czytaliby wszystkie recenzje). By uniknąć takiej ewentualności wprowadzony został system paginacji. Klient może zapytać serwer o kolejną partie obiektów z listy. Zapytanie o konkretną stronę/strony odbywa się poprzez dodanie do zapytania o listę flagi `page=xxx`. Gdzie zamiast `xxx` wstawiane są oddzielone przecinkami numery stron, o które prosi klient. 

  * Serwer każdorazowo interpretuje zapytanie o listę w którym nie ma flagi page jako zapytanie o pierwszą stronę wyników.
  * Serwer decyduje o sposobie paginacji (ułożeniu wyników na liście) jak i o liczności konkretnych stron. Dopuszcza się tu „krótką” niespójność danych po stronie klienta w przypadku zmian ustawień lub danych.
  * Serwer może przesyłać w odpowiedzi na zapytanie o stronę jedynie nagłówek obiektu oraz uzupełnione IDki w polach z listą. Np. zapytanie o page=2,3 recenzji businessu o id 3 może zwrócić jedynie nagłówek tego businessu oraz pole reviews, w którym będą podane jedynie id-ki recenzji ze stron 2 oraz 3. Klient powinien złączyć listy, oraz ewentualnie usunąć powstałe w wyniku niespójności duble. 


==Header==

Każdy obiekt mapowany z bazy danych posiada nagłówek składający się z pól:

|| id	|| Long	|| Unikalny w tym typie numer identyfikacyjny || 
|| type	|| String || 	Nazwa typu obiektu || 
|| version || Long || 	Wersja obiektu (numeracja od 0) || 
|| _deleted_ || Boolean	||  Obiekt nie istnieje w bazie danych || 


Pole _deleted_ (opcjonalne) przesyłane jest tylko przez serwer. Przesłanie obiektu z takim polem (flaga true) oznacza że klient explicite poprosił o ten obiekt jednak został on już usunięty po stronie serwera. Oznacza to, że klient posiada nieaktualną wersję innego obiektu który spowodował wysłanie requesta o obiekt usunięty. Obiekt oznaczony flagą deleted należy natychmiast usunąć z pamięci lokalnej oraz w miarę możliwości uaktualnić obiekt z nieprawidłową referencją.

----

==Business==

|| Numer typu || *0* ||
|| Nazwa typu || *`Business`* ||


|| name || String || Nazwa businessu || 
|| longtitude || 	Double || Długość geograficzna || 
|| latitude	|| Double || Szerokość geograficzna || 
|| _address_	|| String || Adres businessu || 
|| _city_	|| String || Miasto businessu || 
|| _phone_	|| String || Numer telefonu (kom lub stacjonarny) || 
|| _rating_	|| Double || Rating lokalu (skala 0.0 – 5.0) domyślnie: 0 || 
|| _www_ || String || Web Page || 
|| _gallery_	|| Long || ID obiektu Gallery który przechowuje zdjęcia businessu || 
|| _photo_	|| String || URL do jednego zdjęcia frontowego businessu || 
|| _total_reviews_ || 	Int || Liczba wszystkich recenzji tego business || 
|| _reviews_	|| `List<Long>` || Lista ID-ków recenzji tego businessu. CSV idków || 
|| _advert_	|| String || Tekst reklamy frontowej (max 160 znaków) || 
|| _advert_date_ || Long || Data wygaśnięcia reklamy frontowej (ms. Od 1.01.1970) || 
|| total_adverts || Long || Liczba wszystkich promocji businessu. || 
|| _adverts_	|| `List<Long>` || CSV idków promocji tego businessu || 
|| _weight_	|| Double || Waga businessu. (defaultowo 0) skala 0-1 || 
|| _categories_	|| `List<Long>` || List ID-ków kategorii. String z CSV idków || 

  * Brak pola total_reviews lub total_adverts oznacza brak jakichkolwiek recenzji bądź promocji (odpowiednio). W takiej sytuacji pole reviews oraz adverts i advert mogą nie być w ogóle czytane. Reklama (promocja) frontowa jest też częścią listy promocji.

----

==Business Short==

|| name || String || Nazwa businessu || 
|| longtitude || Double	|| Długość geograficzna || 
|| latitude || Double || Szerokość geograficzna || 
|| _photo_ || String || URL do jednego zdjęcia frontowego businessu || 
|| _rating_ || Double || Rating lokalu (skala 0.0 – 5.0) || 
|| _advert_ || String || Tekst reklamy frontowej (max 160 znaków) || 
|| advert_date_ ||  Long || Data wygaśnięcia reklamy (ms. od 1.01.1970) || 
|| _weight_ || Int || Waga businessu. (defaultowo 0) || 


  * Business Short jest tak naprawdę obiektem Business jednak w założeniu nie ma wszystkich danych które może mieć pełen obiekt Business. Jedyna różnica to polega na tym że klient może explicite poprosić o obiekt w okrojonej wersji (BusinessShort) poprzez dodanie flagi short=yes. Dodatkowo klient powinien wykrywać czy posiada wersje Short czy pełną. Obecność dowolnego pola nienależącego jedynie do wersji Short oznacza że dany obiekt jest w wersji pełnej (Business).

  * Nagłówek jest IDENTYCZNY jak nagłówek odpowiadającego obiektu typu Business. (to jest ten sam obiekt)

  * Jest to krótsza wersja obiektu business potrzebna w celu szybkiego prezentowania krótkiej reklamy (np. w widgetach lub listach businessów)

  * Klient powinien płynnie dostosować się do tych zmian w typie przesyłanych danych. Tzn jeśli prosi o obiekt short a dostanie pełen obiekt powinien rozpoznać go jako pełen obiekt. 

  * Przy braku pola advert_date w sytuacji gdy obecne jest pole advert to klient sam podejmuje decyzje o czasie wyświetlania reklamy. Możliwym sposobem jest pamiętanie ostatniego czasu synchronizacji każdego obiektu i ustalenie arbitralnie maksymalnego czasu promocji w przypadku braku pola advert_date. Serwer natomiast powinien zadbać by pole advert_date było dostępne w przypadku wystąpienia pola advert.

----

==Proximity Advertisement==


|| Numer typu || *51* ||
|| Nazwa typu || *`AdvertProximity`* ||


|| businesses || `List<Long>` || Lista ID businessów w tej promocji. Lista powinna zawierać co najmniej jeden element (maksymalnie 50) || 
|| expires || 	Long	|| Data wygaśnięcia promocji (ms. od 1.01.1970) || 
|| latitude || 	Double || 	Szerokość geograficzna środka promocji || 
|| longtitude || 	Double	|| Długość geograficzna środka promocji || 
|| radius || 	Long || 	Promień funkcjonowania recenzji (w metrach) || 
|| city	|| String || 	Miasto z którego zostały wybrane reklamy || 

  * Należy zwrócić uwagę, że pole businesses nie ma pola total_businesses. Przesyłamy od razu wszystkie obiekty na raz i nie można dopytać się o pozostałe obiekty na liście.