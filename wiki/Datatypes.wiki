#summary Datatypes of objects used by dood server.
#labels Featured

= Data types =

Content:

   * [Datatypes#Introduction Introduction]
   * [Datatypes#Interpretacja_list Interpretacja list]
   * [Datatypes#Header Header]
   * [Datatypes#API_Session API Session]
   * [DatatypesBusiness Business]
   * [DatatypesAdvertProximity Advert Proximity]
   * [DatatypesCategory Category]


== Introduction == 

Przykładowy obiekt:

|| Nazwa Pola Wymaganego || Typ pola || Opis ||
|| _Nazwa Pola NIE Wymaganego_ || Typ pola || Opis ||

_UWAGA:_  wymóg obecności pola dotyczy ostatecznej informacji klienta o danym obiekcie. Serwer może przesyłać niepełne dane o obiektach jednak musi mieć wtedy pewność (za pomocą mechanizmu wersjonowania – pole `version`) że klient posiada świeże dane we wszystkich innych polach wymaganych.

Brak któregokolwiek pola wymaganego powinien skutkować odrzuceniem obiektu przez klienta API i ewentualnie wysłaniem raportu o błędzie.
Każdy obiekt mapowany z bazy danych ma określony numer typu i nazwę która przekazywana jest w polu o nazwie type i typie String znajdującym się wewnątrz przesyłanego obiektu. Pole to jest wymagane.

Pole typu `List<Long>` interpretowane jest w przypadku JSONa jako String z wartościami oddzielonymi przecinkami (CSV)
Obiekt *FRONTOWY* jest wyróżniony spośród innych obiektów znajdujących się na liście. Wyróżnienie odbywa się przez umieszczenie go na pierwszym miejscu w przesyłanej liście. Np. _Business_ ma frontową recenzję tj. znajdującą się na pierwszym miejscu na liście. Galeria może mieć frontowy obrazek.


==Interpretacja List== 

Przy modelowaniu obiektów często korzysta się z koncepcji listy. `Business` może mieć listę recenzji, użytkownik może mieć listę znajomych itd. Wprowadzenie jednego ogólnego typu List było dyskutowane przez twórców tego dokumentu i ostatecznie podjęto decyzje o niewprowadzaniu tego typu jako oddzielnej części API. Stworzyłoby to sztuczny obiekt który pomimo klarownego wydzielenia jego funkcjonalności niebyły czytelny przy analizowaniu konkretnych zapytań w określonym czasie działania aplikacji.  Wszystkie funkcje listy z powodzeniem mogą przejąć obiekty, które miały mieć podczepione pod siebie listy. Decyzje o wprowadzeniu osobnych obiektów typu List na poziomie aplikacji klienckich pozostawiamy w gestii twórców tych aplikacji.

Pewnym wyjątkiem od tej reguły jest obiekt Gallery (przechowuje on w końcu listę zdjęć). Obiekt ten jednak niesie w sobie również inne informacje specyficzne dla konkretnego zestawu zdjęć, stąd decyzja o jego wydzieleniu.

*BARDZO WAŻNĄ KWESTIĄ* jest rozdzielenie licznika obiektów znajdujących się w liście (nazwa zmiennej zaczyna się od total np. total_reviews) od samej listy (nazwa pola to drugi człon nazwy licznika w tym wypadku reviews w liczbie mnogiej). Licznik obiektów na liście musi zawsze wskazywać poprawną i aktualną wartość. Zmienna przechowująca samą listę idków już nie. W sytuacji gdyby jeden Business miał kilka tysięcy recenzji prowadziłoby to do przesyłania dużej ilości niepotrzebnych danych (użytkownicy rzadko czytaliby wszystkie recenzje). By uniknąć takiej ewentualności wprowadzony został system paginacji. Klient może zapytać serwer o kolejną partie obiektów z listy. Zapytanie o konkretną stronę/strony odbywa się poprzez dodanie do zapytania o listę flagi `page=xxx`. Gdzie zamiast `xxx` wstawiane są oddzielone przecinkami numery stron, o które prosi klient. 

  * Serwer każdorazowo interpretuje zapytanie o listę w którym nie ma flagi page jako zapytanie o pierwszą stronę wyników.
  * Serwer decyduje o sposobie paginacji (ułożeniu wyników na liście) jak i o liczności konkretnych stron. Dopuszcza się tu „krótką” niespójność danych po stronie klienta w przypadku zmian ustawień lub danych.
  * Serwer może przesyłać w odpowiedzi na zapytanie o stronę jedynie nagłówek obiektu oraz uzupełnione IDki w polach z listą. Np. zapytanie o page=2,3 recenzji businessu o id 3 może zwrócić jedynie nagłówek tego businessu oraz pole reviews, w którym będą podane jedynie id-ki recenzji ze stron 2 oraz 3. Klient powinien złączyć listy, oraz ewentualnie usunąć powstałe w wyniku niespójności duble. 


==Header==

Każdy obiekt mapowany z bazy danych posiada nagłówek składający się z pól:

|| *Field* || *Type* || *Description* || 
|| `id`	|| `Long` || Unikalny w tym typie numer identyfikacyjny || 
|| `type` || `String` || Nazwa typu obiektu || 
|| `version` || `Date` || Date of last edit. UNIX format. || 
|| `deleted` || `Boolean` || Obiekt nie istnieje w bazie danych || 

`id` and `type` uniquely define data object.


Pole _deleted_ (opcjonalne) przesyłane jest tylko przez serwer. Przesłanie obiektu z takim polem (flaga true) oznacza że klient explicite poprosił o ten obiekt jednak został on już usunięty po stronie serwera. Oznacza to, że klient posiada nieaktualną wersję innego obiektu który spowodował wysłanie requesta o obiekt usunięty. Obiekt oznaczony flagą deleted należy natychmiast usunąć z pamięci lokalnej oraz w miarę możliwości uaktualnić obiekt z nieprawidłową referencją.

==API Session==

|| *field* || *type* || *description* ||
|| `photo_server` || `String` || URL of server with photos ||
|| `session_key` || `String` || session key ||
|| `id` || `String` || API key ||
|| `category_version` || Long || ms. from 1.01.1970 ||