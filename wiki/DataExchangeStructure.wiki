#summary Data exchange structure for server communication.


= Data Exchange Structure =

Content:

  * [DataExchangeStructure#Response_format Response format]
  * [DataExchangeStructure#Request_format Szkielet Request format]

== Response format ==

{{{
{	
   "code"         : 243,
   "message"      : "Description",
   "data"         : [ ],
}
}}}


|| *Variable* || *Type* || *Description* || 
|| `code` || `Integer` || Error code || 
|| `message` || `String` || Error message || 
|| `data` || `Array` || Array of results || 


  * Pola data oraz message są opcjonalne. Pole code jest wymagane w każdej odpowiedzi z serwera. Pole session_key pojawia się tylko przy logowaniu i rejestracji.
  * Pole data jest tablicą obiektów mapowanych z bazy danych po stronie serwera. Wszystkie dane które tam się znajdują traktuje się jako bieżącą wersje wymienionych obiektów.
|| *1* || pole data może ( i jest to nawet wskazane ) zawierać nie tylko te obiekty, o które poprosił klient. W szczególności przy zapytaniu o konkretną galerię można od razu wysłać tą samą odpowiedzią zdjęcia tej galerii (obiekty Photo). Serwer implementuje logikę odpowiedzialną za mądre przesyłanie danych. ||
|| *2* ||	Dane w tablicy data są przesyłane z zachowaniem kolejności. W pierwszym rzędzie przesyłane są te dane, o które użytkownik poprosił, a dopiero później ewentualne dodatkowe obiekty. ||
|| *3* || Dane w tablicy data mogą zawierać reprezentacje obiektów wielu typów. ||
|| *4* || Zakłada się że pole data jest puste (lub go brak) w przypadku gdy pole code jest różne od MSG_OK. Wyjątkiem jest aktualizacja/tworzenie obiektów przez klienta i ich rejestrowanie na serwerze. ||
|| *5* || Pole message powinno być puste (lub go brak) w przypadku gdy code jest równe MSG_OK i niepuste w przeciwnym razie. ||


== Request format ==

API Request is either POST or GET HTTP request, with parameters in standard HTTP format:
`param1=value1&param2=value2&...`

Almost every request has session key:

|| `session_key` || Session key (must be given everywhere except /session/start/ request || 

Example of other parameters:

|| `ids` || string with ids of items that client want ||
|| `has` || string with ids we already have in format `"id1,version1;id2;version2"` || 
<wiki:comment>
|| `new` || JSONObject  z jednym obiektem który tworzymy . Obiekt powinien być pozbawiony pól id i version (te nadaje serwer) ale musi mieć pole type (typ tworzonego obiektu) ||
|| up || JSONObject  z jednym obiektem który uaktualniamy (cały obiekt). Obiekt musi mieć wszystkie z pól id , version , type || 
|| del || JSONObject  z jednym obiektem który usuwamy (tylko nagłówek). Obiekt musi mieć wszystkie z pól id , version , type. || 
</wiki:comment>